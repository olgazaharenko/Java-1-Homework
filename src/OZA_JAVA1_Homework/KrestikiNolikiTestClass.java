package OZA_JAVA1_Homework;

import java.awt.Graphics;

public class KrestikiNolikiTestClass {

	/**
	 * Выводим предложение сыграть в крестики - нолики на поле 3*3 из 9 клеток.
	 * Получено согласие - запускаем игру, нет - завершаем программу.
	 * 
	 * Если согласились играть, Игра {
	 * 
	 * Функция Знакомство {
	 * 
	 * Просим ввести имя игрока.
	 * Компьютер играет под именем Dr. Z-z-zlo. 
	 * Выводит сообшение кто с кем играет.
	 * 
	 * Возвращает имена игроков.
	 * 
	 * } //завершаем Знакомство
	 * 
	 * Функция Ходим X или O {
	 * Запрашиваем выбор игрока-человека, какой фигурой ходить - X или O.
	 * Выводим сообщение кто чем играет.
	 * 
	 * Возвращает выбор фигуры игрока-человека, присваивает оставшуюся фигуру компьютеру.;
	 * } //завершаем Ходим X или O
	 * 
	 * Функция Печать правила игры {
	 *  
	 * Перед игрой выводим правила игры в рамочке.
	 * 
	 * } //завершаем Печать правил игры
	 * 
	 * Функция Создаем поле игры. {
	 * 
	 * Создаем поле игры.	 
	 * 
	 * }// завершаем Создаем поле игры
	 * 
	 * Функция ЗаполняемПолеИгры {
	 * 
	 * По мере ходов поле заполняется.
	 * Возвращаем перерисованное поле игры с заполненными ходами
	 * Заполнение поля идет как со стороны X, так и со стороны O.
	 *  
	 * }// завершаем Заполняем поле игры.
	 *  
	 * 
	 * 
	 * Функция ХодКомпьютера {	 
	 *  
	 * Стратегия игры (нужна только для компьютера).
	 * Два игрока (человек и компьютер) делают ходы по очереди.
	 * Задача раз - выиграть, первым выстроить свои фигуры в поле в ряд по горизонтали, 
	 * вертикали или диагонали.
	 * Задача два - заблокировать такую возможность для соперника.
	 * В начале игры все 9 клеток имеют состояние [Свободно, Тип Фигуры].
	 * Когда клетка заполнена, ее состояние меняется на [Занято, Тип Фигуры].
	 * Первый ход всегда делают X.
	 * Если компьютер играет за X, то его ход первый. 
	 * 
	 * Стратегия 1 - поставить X в середину поля, потом перейти к Стратегии 2.
	 * Стратегия 2 - составление множества доступных ходов + оценка вероятности выигрыша для каждого хода 
	 * через функцию МинМакс на всех свободных клетках поля.
	 * 
	 * После хода соперника составляется множество клеток с состоянием [Свободно, Тип Фигуры].
	 * 
	 * На этом множестве вызывается функция МинМакс(), которая возвращает выбранную клетку для хода.
	 * 
	 * Меняем состояние выбранной клетки на [Занято, Тип Фигуры].
	 * Перерисовываем поле с учетом занятых клеток.
	 * Передаем ход сопернику.
	 * 
	 * }
	 *  
	 * После того, как ход компьютера сделан, ожидается ход человека.
	 *   
	 * Функция КомпьютерМожетСделатьХод? {
	 *  
	 * Когда множество клеток с состоянием [Свободно, Тип Фигуры] найдено и оно непустое (как минимум,
	 * один элемент), по каждому элементу этого множества повторно перебираются клетки "Рядом" 
	 * с состоянием [Занято, Тип Фигуры].
	 * "Рядом" = сверху, снизу, справа, слева, по диагонали слева вверх, по диагонали справа вверх, 
	 * по диагонали слева вниз, по диагонали справа вниз.
	 * 
	 * Для хода выбирается клетка с состоянием [Свободно, Тип Фигуры] + "Рядом" [Занято, Мой Тип Фигуры].
	 * 
	 * Если таких клеток больше 1, выбираем уже из них по критерию минмакс 
	 * (мин вероятность выиграть для противника, макс для себя).
	 *
	 * По достижению победного состояния для одной из фигур (крестиков или ноликов), 
	 * либо патовой комбинации (когда множество доступных ходов пусто) игра прекращается.
	 * 
	 * }
	 *
	 * Функция МинМакс {
	 * 
	 * Для игры крестики-нолики МинМакс - это эвристическая оценочная функция, которая
	 * достаточно быстро и точно, в выбранной метрике, сможет указать оценку вероятности
	 * победы конкретного игрока для конкретного расположения фигур, не опираясь на то, каким образом
	 * игроки к этому расположению фигур пришли.
	 * 
	 * Определим оценочную функцию как функцию, возвращающую целые значения в интервале от 0 до 10,
	 * где 0 - победа крестиков, 10 - победа ноликов, промежуточные значения - интерполяция 
	 * двух крайних оценок.
	 * 
	 * Как для крестиков, так и для ноликов оценка вероятности победы будет выше, если соответствующий символ успел
	 * занять середину. В этом случае оценочная функция для крестиков будет выбирать значения из интервала
	 * от 0 до 4, а для ноликов от 5 до 10.
	 *
	 * 
	 * 
	 * 
	 * } //завершаем МинМакс
	 * 
	 * Функция Принять Ход Человека {
	 *  
	 * Считываются данные по ходу соперника.
	 * Вызывается Заполняем поле игры ();
	 * 
	 * }
	 *  
	 * Выводим сообщение о статусе игры и имени победителя, если была победа.
	 * Выводим сообщение о ничьей, если была ничья.
	 * Выводим предложение сыграть еще раз.
	 * } //завершаем игру, если играли.
	 * 
	 * Функция Не согласились играть {
	 * Выводим сообщение об отказе от игры. 
	 * }//обрабатываем отказ от игры.
	 * 
	 */
	public static void main(String[] args) {
		
		if (KrestikiNoliki.GameInvitation().equals("Y")) {
			
			KrestikiNoliki.GameRules();
			KrestikiNoliki.CreateGameField(KrestikiNoliki.LetMeKnowWhatIsYourName(), "Dr.Z-z-zlo");	
			
			if (KrestikiNoliki.LetMeKnowWhatIsYourFigure().equals("O")) {
				ComputerXOPlayer.doMove();
			}
			else {
				HumanXOPlayer.doMove();
			}
			KrestikiNoliki.FillGameField ();
			
		}
		else {
			KrestikiNoliki.GameOver();
		}
	}
	
}
