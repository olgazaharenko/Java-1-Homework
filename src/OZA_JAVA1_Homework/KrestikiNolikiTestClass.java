package OZA_JAVA1_Homework;

public class KrestikiNolikiTestClass {

	/**
	 * Выводим предложение сыграть в крестики - нолики на поле 3*3 из 9 клеток.
	 * Получено согласие - запускаем игру, нет - завершаем программу.
	 * 
	 * Если согласились играть, Игра {
	 * 
	 * Функция Знакомство {
	 * 
	 * Просим ввести имя игрока.
	 * Компьютер играет под именем Dr. Z-z-zlo. 
	 * Выводит сообшение кто с кем играет.
	 * 
	 * Возвращает имена игроков.
	 * 
	 * } //завершаем Знакомство
	 * 
	 * Функция Ходим X или O {
	 * Запрашиваем выбор игрока-человека, какой фигурой ходить - X или O.
	 * Выводим сообщение кто чем играет.
	 * 
	 * Возвращает выбор фигуры игрока-человека, присваивает оставшуюся фигуру компьютеру.;
	 * } //завершаем Ходим X или O
	 * 
	 * Функция Печать правила игры {
	 *  
	 * Перед игрой выводим правила игры в рамочке.
	 * 
	 * } //завершаем Печать правил игры
	 * 
	 * Функция Создаем поле игры. {
	 * Создаем пустое поле игры.	 
	 * 
	 * }// завершаем Создаем поле игры
	 * 
	 * По мере ходов поле заполняется.
	 * Заполнение поля идет как со стороны X, так и со стороны O.
	 * Первый ход всегда делают X.
	 * 
	 * Стратегия игры (нужна только для компьютера).
	 * Два игрока (человек и компьютер) делают ходы по очереди.
	 * Задача раз - выиграть, первым выстроить свои фигуры в поле в ряд по горизонтали, вертикали или диагонали.
	 * Задача два - заблокировать такую возможность для соперника.
	 * В начале игры все 9 клеток имеют состояние Свободно, Нет Фигуры.
	 * Когда клетка заполнена, ее состояние меняется на Занято, Фигура.
	 * Первый ход всегда делают X.
	 * Если компьютер играет за X, то его ход первый. 
	 * 
	 * Стратегия 1 - поставить X в середину поля
	 * Стратегия 2 - функция МинМакс на всех свободных клетках поля.
	 * 
	 * После того, как ход сделан, ожидается ход соперника.
	 * Считываются данные по ходу соперника.
	 * После хода соперника составляется множество клеток с состоянием [Свободно, Тип Фигуры].
	 * На этом множестве вызывается функция МинМакс(), которая возвращает выбранную клетку для хода.
	 * Меняем состояние выбранной клетки на [Занято, Тип Фигуры].
	 * Перерисовываем поле с учетом занятых клеток.
	 * Передаем ход сопернику.
	 * 
	 * Функция МинМакс {
	 * 
	 * 
	 * Когда множество клеток с состоянием Свободно, Нет фигуры найдено, по каждому элементу этого множества 
	 * повторно перебираются клетки из окружения с состоянием [Занято, Тип Фигуры].
	 * Для хода выбирается клетка с состоянием [Свободно, Тип Фигуры] + рядом [Свободно, Тип Фигуры].
	 * Рядом = сверху, снизу, справа, слева, по диагонали слева вверх, по диагонали справа вверх, по диагонали слева вниз, по диагонали справа вниз.
	 * Если таких клеток больше 1, выбираем уже из них по критерию минмакс 
	 * (мин вероятность выиграть для противника, макс для себя).
	 * 
	 * 
	 * } //завершаем МинМакс
	 * 
	 * По достижению победного состояния для одной из фигур (крестиков или ноликов), 
	 * либо патовой комбинации игра прекращается.
	 * Выводим сообщение о статусе игры и имени победителя, если была победа.
	 * Выводим сообщение о ничьей, если была ничья.
	 * Выводим предложение сыграть еще раз.
	 * } //завершаем игру, если играли.
	 * 
	 * Функция Не согласились играть {
	 * Выводим сообщение об отказе от игры. 
	 * }//обрабатываем отказ от игры.
	 * 
	 */
	public static void main(String[] args) {
		
		
	}

}
